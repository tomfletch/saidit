// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  username        String?        @unique
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdChannels Channel[]
  subscriptions   Subscription[]
  posts           Post[]
  comments        Comment[]
  postVotes       PostVote[]
  commentVotes    CommentVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id              String         @id @default(cuid())
  name            String         @unique
  createdByUser   User           @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[]
  posts           Post[]

  @@index([createdByUserId])
}

model Subscription {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  createdAt DateTime @default(now())

  @@id([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

model Post {
  id        String     @id @default(cuid())
  channel   Channel    @relation(fields: [channelId], references: [id])
  channelId String
  title     String
  body      String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  votes     PostVote[]

  @@index([channelId])
  @@index([authorId])
}

enum VoteType {
  UP
  DOWN
}

model PostVote {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String        @id @default(cuid())
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  replyTo   Comment?      @relation("replyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[]     @relation("replyTo")
  body      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  votes     CommentVote[]

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

model CommentVote {
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
}
